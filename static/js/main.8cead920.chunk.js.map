{"version":3,"sources":["model/node.js","components/Line.js","components/Node.js","components/Tree.js","components/Toolkit.js","App.js","index.js"],"names":["treeNode","label","level","size","color","parent","left","right","cx","cy","makeTree","depth","nodeSize","idSequence","leafCont","Math","pow","width","rootId","root","nodes","queue","length","node","shift","levelOffcet","cxOffcet","push","Line","begin","end","x1","y1","x2","y2","stroke","Node","selected","radius","BORDER_WIDTH","className","strokeWidth","fill","r","data-node-id","x","y","textAnchor","alignmentBaseline","Tree","selectedId","onNodeSelected","onNodeMoved","useState","draggable","setDraggable","onMouseDown","useCallback","e","target","dataset","nodeId","clientX","clientY","onMouseUp","onDrag","dx","dy","onClick","nodesArray","Object","values","edges","filter","map","leafs","onMouseMove","xmlns","xmlnsXlink","DEFAULT_COLOR","COLORS","Toolkit","onDepthChanged","onColorChanged","increment","decrement","htmlFor","disabled","name","type","min","max","value","readOnly","c","style","backgroundColor","App","props","selectNode","id","setState","moveNode","state","newNodes","setDepth","setColor","animate","setTimeout","animationInterval","initialColor","this","React","PureComponent","result","random","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cead920.chunk.js","sourcesContent":["const treeNode = (label, level, size, color, parent = null) => ({\n    label: label + \"\",\n    level,\n    left: null,\n    right: null,\n    parent,\n    size,\n    color,\n    cx: 0,\n    cy: 0,\n});\n\nexport function makeTree(depth = 1, nodeSize = 50, color = \"\") {\n    let idSequence = 0;\n\n    const leafCont = Math.pow(2, depth - 1);\n    const width = leafCont * nodeSize + (leafCont - 1) * nodeSize;\n\n    const rootId = 1;\n    const root = {\n        ...treeNode(idSequence++, rootId, nodeSize, color),\n        cx: width / 2,\n        cy: rootId * nodeSize - nodeSize / 2,\n    };\n\n    const nodes = {\n        [root.label]: root,\n    };\n    const queue = [root];\n\n    while (queue.length) {\n        const node = queue.shift();\n\n        if (node.level + 1 <= depth) {\n            // чем ближе к корню дерева - тем дальше друг от друга находятся узлы одного уровня\n            const levelOffcet = Math.pow(2, depth - node.level - 1) - 1;\n            const cxOffcet = (levelOffcet + 1) * nodeSize;\n\n            const left = {\n                ...treeNode(idSequence++, node.level + 1, nodeSize, color, node.label),\n                cx: node.cx - cxOffcet,\n                cy: node.cy + nodeSize,\n            };\n            node.left = left.label;\n\n            const right = {\n                ...treeNode(idSequence++, node.level + 1, nodeSize, color, node.label),\n                cx: node.cx + cxOffcet,\n                cy: node.cy + nodeSize,\n            };\n            node.right = right.label;\n\n            queue.push(left, right);\n\n            nodes[left.label] = left;\n            nodes[right.label] = right;\n        }\n    }\n\n    return nodes;\n}\n","export const Line = ({ begin, end }) => {\n    return <line x1={begin.cx} y1={begin.cy} x2={end.cx} y2={end.cy} stroke=\"black\" />;\n};\n","const BORDER_WIDTH = 2;\n\nexport const Node = ({ node, selected }) => {\n    const { cx, cy, size, color, label } = node;\n    const radius = size / 2 - BORDER_WIDTH / 2;\n\n    return (\n        <>\n            <g className=\"tree-node\">\n                <circle\n                    className=\"tree-node_leaf\"\n                    strokeWidth={BORDER_WIDTH}\n                    stroke={selected ? \"black\" : color}\n                    fill={color}\n                    cx={cx}\n                    cy={cy}\n                    r={radius}\n                    data-node-id={label}\n                />\n                <text\n                    className=\"tree-node_text\"\n                    x={cx}\n                    y={cy}\n                    textAnchor=\"middle\"\n                    alignmentBaseline=\"central\"\n                    data-node-id={label}\n                >\n                    {label}\n                </text>\n            </g>\n        </>\n    );\n};\n","import { useCallback, useState } from \"react\";\nimport { Line } from \"./Line\";\nimport { Node } from \"./Node\";\n\nexport const Tree = ({ nodes, selectedId, onNodeSelected, onNodeMoved }) => {\n    const [draggable, setDraggable] = useState(null);\n\n    const onMouseDown = useCallback((e) => {\n        if (e.target.dataset.nodeId) {\n            setDraggable({ node: e.target.dataset.nodeId, x: e.clientX, y: e.clientY });\n        }\n    }, []);\n\n    const onMouseUp = useCallback((e) => {\n        setDraggable(null);\n    }, []);\n\n    const onDrag = useCallback(\n        (e) => {\n            if (draggable) {\n                const { clientX, clientY } = e;\n                const dx = clientX - draggable.x;\n                const dy = clientY - draggable.y;\n\n                setDraggable({ node: draggable.node, x: clientX, y: clientY });\n                onNodeMoved(draggable.node, dx, dy);\n            }\n        },\n        [draggable, onNodeMoved]\n    );\n\n    const onClick = useCallback(\n        (e) => {\n            if (e.target.dataset.nodeId) {\n                onNodeSelected(e.target.dataset.nodeId);\n            } else {\n                onNodeSelected(null);\n            }\n        },\n        [onNodeSelected]\n    );\n\n    const nodesArray = Object.values(nodes);\n\n    const edges = nodesArray\n        .filter((node) => !!node.parent)\n        .map((node) => {\n            const begin = nodes[node.parent];\n            return <Line key={node.label} begin={begin} end={node} />;\n        });\n\n    const leafs = nodesArray.map((node) => {\n        return <Node key={node.label} node={node} selected={node.label === selectedId} />;\n    });\n\n    return (\n        <svg\n            onClick={onClick}\n            onMouseDown={onMouseDown}\n            onMouseUp={onMouseUp}\n            onMouseMove={onDrag}\n            className=\"tree\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        >\n            {edges}\n            {leafs}\n        </svg>\n    );\n};\n","import { useCallback } from \"react\";\n\nexport const DEFAULT_COLOR = \"#1E90FF\";\nconst COLORS = [\"#9370D8\", DEFAULT_COLOR, \"#DAA520\", \"#FFC0CB\", \"#90EE90\"];\n\nexport const Toolkit = ({ depth, color, onDepthChanged, onColorChanged }) => {\n    const increment = useCallback(() => {\n        onDepthChanged(depth + 1);\n    }, [onDepthChanged, depth]);\n\n    const decrement = useCallback(() => {\n        onDepthChanged(depth - 1);\n    }, [onDepthChanged, depth]);\n\n    return (\n        <div className=\"toolkit\">\n            <label htmlFor=\"depth\">Глубина</label>\n            <div>\n                <button disabled={depth === 1} onClick={decrement}>\n                    -\n                </button>\n                <input name=\"depth\" type=\"number\" min={1} max={20} value={depth} readOnly />\n                <button disabled={depth === 20} onClick={increment}>\n                    +\n                </button>\n            </div>\n\n            <label htmlFor=\"color\">Цвет</label>\n            <div name=\"color\">\n                {COLORS.map((c) => (\n                    <div\n                        key={c}\n                        style={{ backgroundColor: c }}\n                        className={`toolkit_color ${color === c ? \"toolkit_color-selected\" : \"\"}`}\n                        onClick={() => onColorChanged(c)}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { makeTree } from \"./model/node\";\nimport { Tree } from \"./components/Tree\";\nimport { DEFAULT_COLOR, Toolkit } from \"./components/Toolkit\";\n\nconst NODE_SIZE = 25;\n\nclass App extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        const initialDepth = 2;\n        const initialColor = DEFAULT_COLOR;\n\n        this.state = {\n            selected: null,\n            color: initialColor,\n            depth: initialDepth,\n            nodes: makeTree(initialDepth, NODE_SIZE, initialColor),\n        };\n    }\n\n    render() {\n        const { color, depth, selected, nodes } = this.state;\n\n        return (\n            <div className=\"app\">\n                <Toolkit color={color} depth={depth} onColorChanged={this.setColor} onDepthChanged={this.setDepth} />\n\n                <div className=\"tree-wrapper\">\n                    <Tree\n                        nodes={nodes}\n                        selectedId={selected}\n                        onNodeSelected={this.selectNode}\n                        onNodeMoved={this.moveNode}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    selectNode = (id) => this.setState({ selected: id });\n\n    moveNode = (id, dx, dy) => {\n        const node = this.state.nodes[id];\n\n        if (node) {\n            const newNodes = {\n                ...this.state.nodes,\n                [id]: {\n                    ...node,\n                    cx: node.cx + dx,\n                    cy: node.cy + dy,\n                },\n            };\n\n            this.setState({ nodes: newNodes });\n        }\n    };\n\n    setDepth = (depth) => {\n        const { color, selected } = this.state;\n        const nodes = makeTree(depth, NODE_SIZE, color);\n\n        this.setState({ selected: nodes[selected] ? nodes[selected].label : null, depth, nodes });\n    };\n\n    setColor = (color) => {\n        const { selected, nodes } = this.state;\n        if (selected !== null) {\n            const node = nodes[selected];\n\n            if (node) {\n                this.setState({ color });\n                this.animate(color, node.label);\n            }\n        }\n    };\n\n    animate = (color, id) => {\n        const node = this.state.nodes[id];\n\n        if (node) {\n            const newNodes = {\n                ...this.state.nodes,\n                [id]: {\n                    ...node,\n                    color,\n                },\n            };\n\n            this.setState({ nodes: newNodes }, () => {\n                const parent = this.state.nodes[node.parent];\n                const left = this.state.nodes[node.left];\n                const right = this.state.nodes[node.right];\n\n                if (parent && parent.color !== color) {\n                    setTimeout(() => this.animate(color, parent.label), animationInterval());\n                }\n\n                if (left && left.color !== color) {\n                    setTimeout(() => this.animate(color, left.label), animationInterval());\n                }\n\n                if (right && right.color !== color) {\n                    setTimeout(() => this.animate(color, right.label), animationInterval());\n                }\n            });\n        }\n    };\n}\n\nconst animationInterval = () => {\n    const min = 800;\n    const max = 1200;\n\n    const result = min + Math.random() * (max + 1 - min);\n    return Math.floor(result);\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
{"version":3,"sources":["model/node.js","components/Line.js","components/Node.js","components/Tree.js","components/Toolkit.js","App.js","index.js"],"names":["treeNode","label","level","size","color","parent","left","right","cx","cy","makeTree","depth","nodeSize","idSequence","leafCont","Math","pow","width","rootId","root","nodes","queue","length","node","shift","levelOffcet","cxOffcet","push","height","Line","begin","end","x1","y1","x2","y2","stroke","Node","selected","radius","BORDER_WIDTH","className","strokeWidth","fill","r","data-node-id","x","y","textAnchor","alignmentBaseline","Tree","selectedId","onNodeSelected","onClick","useCallback","e","target","dataset","nodeId","edges","filter","map","leafs","xmlns","xmlnsXlink","viewBox","DEFAULT_COLOR","COLORS","Toolkit","onDepthChanged","onColorChanged","increment","decrement","htmlFor","disabled","name","type","min","max","value","readOnly","c","style","backgroundColor","App","props","selectNode","id","setState","setDepth","tree","state","restoredSelection","find","n","setColor","animate","newNodes","setTimeout","animationInterval","initialColor","this","React","PureComponent","result","random","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAMA,G,MAAW,SAACC,EAAOC,EAAOC,EAAMC,GAArB,IAA4BC,EAA5B,uDAAqC,KAArC,MAA+C,CAC5DJ,MAAOA,EAAQ,GACfC,QACAI,KAAM,KACNC,MAAO,KACPF,SACAF,OACAC,QACAI,GAAI,EACJC,GAAI,KAGD,SAASC,IAgBZ,IAhB4D,IAAvCC,EAAsC,uDAA9B,EAAGC,EAA2B,uDAAhB,GAAIR,EAAY,uDAAJ,GACnDS,EAAa,EAEXC,EAAWC,KAAKC,IAAI,EAAGL,EAAQ,GAC/BM,EAAQH,EAAWF,GAAYE,EAAW,GAAKF,EAE/CM,EAAS,EACTC,EAAI,2BACHnB,EAASa,IAAcK,EAAQN,EAAUR,IADtC,IAENI,GAAIS,EAAQ,EACZR,GAAIS,EAASN,EAAWA,EAAW,IAGjCQ,EAAQ,CAACD,GACTE,EAAQ,CAACF,GAERE,EAAMC,QAAQ,CACjB,IAAMC,EAAOF,EAAMG,QAEnB,GAAID,EAAKrB,MAAQ,GAAKS,EAAO,CAEzB,IAAMc,EAAcV,KAAKC,IAAI,EAAGL,EAAQY,EAAKrB,MAAQ,GAAK,EACpDwB,GAAYD,EAAc,GAAKb,EAErCW,EAAKjB,KAAL,2BACON,EAASa,IAAcU,EAAKrB,MAAQ,EAAGU,EAAUR,EAAOmB,IAD/D,IAEIf,GAAIe,EAAKf,GAAKkB,EACdjB,GAAIc,EAAKd,GAAKG,IAGlBW,EAAKhB,MAAL,2BACOP,EAASa,IAAcU,EAAKrB,MAAQ,EAAGU,EAAUR,EAAOmB,IAD/D,IAEIf,GAAIe,EAAKf,GAAKkB,EACdjB,GAAIc,EAAKd,GAAKG,IAGlBS,EAAMM,KAAKJ,EAAKjB,KAAMiB,EAAKhB,OAC3Ba,EAAMO,KAAKJ,EAAKjB,KAAMiB,EAAKhB,QAInC,MAAO,CAAEU,QAAOW,OAAQjB,EAAQC,EAAUQ,S,WCrDjCS,EAAO,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC1B,OAAO,sBAAMC,GAAIF,EAAMtB,GAAIyB,GAAIH,EAAMrB,GAAIyB,GAAIH,EAAIvB,GAAI2B,GAAIJ,EAAItB,GAAI2B,OAAO,WCC/DC,EAAO,SAAC,GAAwB,IAAtBd,EAAqB,EAArBA,KAAMe,EAAe,EAAfA,SACjB9B,EAA+Be,EAA/Bf,GAAIC,EAA2Bc,EAA3Bd,GAAIN,EAAuBoB,EAAvBpB,KAAMC,EAAiBmB,EAAjBnB,MAAOH,EAAUsB,EAAVtB,MACvBsC,EAASpC,EAAO,EAAIqC,EAE1B,OACI,mCACI,oBAAGC,UAAU,YAAb,UACI,wBACIA,UAAU,iBACVC,YAXC,EAYDN,OAAQE,EAAW,QAAUlC,EAC7BuC,KAAMvC,EACNI,GAAIA,EACJC,GAAIA,EACJmC,EAAGL,EACHM,eAAc5C,IAElB,sBACIwC,UAAU,iBACVK,EAAGtC,EACHuC,EAAGtC,EACHuC,WAAW,SACXC,kBAAkB,UAClBJ,eAAc5C,EANlB,SAQKA,UCrBRiD,EAAO,SAAC,GAA0D,IAAxD9B,EAAuD,EAAvDA,MAAOH,EAAgD,EAAhDA,MAAOW,EAAyC,EAAzCA,OAAQuB,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,eAC/CC,EAAUC,uBACZ,SAACC,GACOA,EAAEC,OAAOC,QAAQC,OACjBN,EAAeG,EAAEC,OAAOC,QAAQC,QAEhCN,EAAe,QAGvB,CAACA,IAGCO,EAAQvC,EACTwC,QAAO,SAACrC,GAAD,QAAYA,EAAKlB,UACxBwD,KAAI,SAACtC,GAAD,OAAU,cAAC,EAAD,CAAuBO,MAAOP,EAAKlB,OAAQ0B,IAAKR,GAArCA,EAAKtB,UAE7B6D,EAAQ1C,EAAMyC,KAAI,SAACtC,GACrB,OAAO,cAAC,EAAD,CAAuBA,KAAMA,EAAMe,SAAUf,EAAKtB,QAAUkD,GAAjD5B,EAAKtB,UAG3B,OACI,sBACIoD,QAASA,EACTZ,UAAU,OACVxB,MAAOA,EA1BH,EA2BJ8C,MAAM,6BACNC,WAAW,+BACXC,QAAO,cAAShD,EA7BZ,EA6BG,YAA4BW,EA7B/B,GAuBR,UAQK+B,EACAG,MClCAI,EAAgB,UACvBC,EAAS,CAAC,UAAWD,EAAe,UAAW,UAAW,WAEnDE,EAAU,SAAC,GAAsD,IAApDzD,EAAmD,EAAnDA,MAAOP,EAA4C,EAA5CA,MAAOiE,EAAqC,EAArCA,eAAgBC,EAAqB,EAArBA,eAC9CC,EAAYjB,uBAAY,WAC1Be,EAAe1D,EAAQ,KACxB,CAAC0D,EAAgB1D,IAEd6D,EAAYlB,uBAAY,WAC1Be,EAAe1D,EAAQ,KACxB,CAAC0D,EAAgB1D,IAEpB,OACI,sBAAK8B,UAAU,UAAf,UACI,uBAAOgC,QAAQ,QAAf,wDACA,gCACI,wBAAQC,SAAoB,IAAV/D,EAAa0C,QAASmB,EAAxC,eAGA,uBAAOG,KAAK,QAAQC,KAAK,SAASC,IAAK,EAAGC,IAAK,GAAIC,MAAOpE,EAAOqE,UAAQ,IACzE,wBAAQN,SAAoB,KAAV/D,EAAc0C,QAASkB,EAAzC,kBAKJ,uBAAOE,QAAQ,QAAf,sCACA,qBAAKE,KAAK,QAAV,SACKR,EAAON,KAAI,SAACoB,GAAD,OACR,qBAEIC,MAAO,CAAEC,gBAAiBF,GAC1BxC,UAAS,wBAAmBrC,IAAU6E,EAAI,yBAA2B,IACrE5B,QAAS,kBAAMiB,EAAeW,KAHzBA,YCvBvBG,E,kDACF,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IA2BVC,WAAa,SAACC,GAAD,OAAQ,EAAKC,SAAS,CAAElD,SAAUiD,KA5B5B,EA8BnBE,SAAW,SAAC9E,GAAW,IAEb+E,EAAOhF,EAASC,EAnCZ,GAkCQ,EAAKgF,MAAfvF,OAGFwF,EACsB,OAAxB,EAAKD,MAAMrD,SAAoBoD,EAAKtE,MAAMyE,MAAK,SAACC,GAAD,OAAOA,EAAE7F,QAAU,EAAK0F,MAAMrD,YAAY,KAE7F,EAAKkD,SAAL,aAAgBlD,SAAUsD,EAAoBA,EAAkB3F,MAAQ,KAAMU,SAAU+E,KArCzE,EAwCnBK,SAAW,SAAC3F,GAAW,IAAD,EACU,EAAKuF,MAAzBrD,EADU,EACVA,SAAUlB,EADA,EACAA,MAClB,GAAiB,OAAbkB,EAAmB,CACnB,IAAMf,EAAOH,EAAMyE,MAAK,SAACC,GAAD,OAAOA,EAAE7F,QAAUqC,KAEvCf,IACA,EAAKiE,SAAS,CAAEpF,UAChB,EAAK4F,QAAQ5F,EAAOmB,EAAKtB,UA/ClB,EAoDnB+F,QAAU,SAAC5F,EAAOmF,GACd,IAAIhE,EAAO,KACL0E,EAAW,EAAKN,MAAMvE,MAAMyC,KAAI,SAACiC,GACnC,OAAOA,EAAE7F,QAAUsF,EAAKO,EAAKvE,EAAI,2BAAQuE,GAAR,IAAW1F,aAG5CmB,GACA,EAAKiE,SAAS,CAAEpE,MAAO6E,IAAY,WAC/B,IAAM5F,EAASkB,EAAKlB,OAAS,EAAKsF,MAAMvE,MAAMyE,MAAK,SAACC,GAAD,OAAOA,EAAE7F,QAAUsB,EAAKlB,OAAOJ,SAAS,KACrFK,EAAOiB,EAAKjB,KAAO,EAAKqF,MAAMvE,MAAMyE,MAAK,SAACC,GAAD,OAAOA,EAAE7F,QAAUsB,EAAKjB,KAAKL,SAAS,KAC/EM,EAAQgB,EAAKhB,MAAQ,EAAKoF,MAAMvE,MAAMyE,MAAK,SAACC,GAAD,OAAOA,EAAE7F,QAAUsB,EAAKhB,MAAMN,SAAS,KAEpFI,GAAUA,EAAOD,QAAUA,GAC3B8F,YAAW,kBAAM,EAAKF,QAAQ5F,EAAOC,EAAOJ,SAAQkG,KAGpD7F,GAAQA,EAAKF,QAAUA,GACvB8F,YAAW,kBAAM,EAAKF,QAAQ5F,EAAOE,EAAKL,SAAQkG,KAGlD5F,GAASA,EAAMH,QAAUA,GACzB8F,YAAW,kBAAM,EAAKF,QAAQ5F,EAAOG,EAAMN,SAAQkG,SAtE/D,IACMC,EAAelC,EAJN,OAMf,EAAKyB,MAAL,aACIrD,SAAU,KACVlC,MAAOgG,EACPzF,MANiB,GAOdD,EAPc,EANX,GAa+B0F,IAV1B,E,0CAcnB,WAAU,IAAD,EACuCC,KAAKV,MAAzCvF,EADH,EACGA,MAAOO,EADV,EACUA,MAAO2B,EADjB,EACiBA,SAAaoD,EAD9B,4CAGL,OACI,sBAAKjD,UAAU,MAAf,UACI,cAAC,EAAD,CAASrC,MAAOA,EAAOO,MAAOA,EAAO2D,eAAgB+B,KAAKN,SAAU1B,eAAgBgC,KAAKZ,WAEzF,qBAAKhD,UAAU,eAAf,SACI,cAAC,EAAD,2BAAUiD,GAAV,IAAgBvC,WAAYb,EAAUc,eAAgBiD,KAAKf,uB,GAvB7DgB,IAAMC,eAiFlBJ,EAAoB,WACtB,IAGMK,EAHM,IAGS,IAAAzF,KAAK0F,SAC1B,OAAO1F,KAAK2F,MAAMF,IAGPpB,I,MC5FfuB,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.e85316ea.chunk.js","sourcesContent":["const treeNode = (label, level, size, color, parent = null) => ({\n    label: label + \"\",\n    level,\n    left: null,\n    right: null,\n    parent,\n    size,\n    color,\n    cx: 0,\n    cy: 0,\n});\n\nexport function makeTree(depth = 1, nodeSize = 50, color = \"\") {\n    let idSequence = 0;\n\n    const leafCont = Math.pow(2, depth - 1);\n    const width = leafCont * nodeSize + (leafCont - 1) * nodeSize;\n\n    const rootId = 1;\n    const root = {\n        ...treeNode(idSequence++, rootId, nodeSize, color),\n        cx: width / 2,\n        cy: rootId * nodeSize - nodeSize / 2,\n    };\n\n    const nodes = [root];\n    const queue = [root];\n\n    while (queue.length) {\n        const node = queue.shift();\n\n        if (node.level + 1 <= depth) {\n            // чем ближе к корню дерева - тем дальше друг от друга находятся узлы одного уровня\n            const levelOffcet = Math.pow(2, depth - node.level - 1) - 1;\n            const cxOffcet = (levelOffcet + 1) * nodeSize;\n\n            node.left = {\n                ...treeNode(idSequence++, node.level + 1, nodeSize, color, node),\n                cx: node.cx - cxOffcet,\n                cy: node.cy + nodeSize,\n            };\n\n            node.right = {\n                ...treeNode(idSequence++, node.level + 1, nodeSize, color, node),\n                cx: node.cx + cxOffcet,\n                cy: node.cy + nodeSize,\n            };\n\n            queue.push(node.left, node.right);\n            nodes.push(node.left, node.right);\n        }\n    }\n\n    return { width, height: depth * nodeSize, nodes };\n}\n","export const Line = ({ begin, end }) => {\n    return <line x1={begin.cx} y1={begin.cy} x2={end.cx} y2={end.cy} stroke=\"black\" />;\n};\n","const BORDER_WIDTH = 2;\n\nexport const Node = ({ node, selected }) => {\n    const { cx, cy, size, color, label } = node;\n    const radius = size / 2 - BORDER_WIDTH / 2;\n\n    return (\n        <>\n            <g className=\"tree-node\">\n                <circle\n                    className=\"tree-node_leaf\"\n                    strokeWidth={BORDER_WIDTH}\n                    stroke={selected ? \"black\" : color}\n                    fill={color}\n                    cx={cx}\n                    cy={cy}\n                    r={radius}\n                    data-node-id={label}\n                />\n                <text\n                    className=\"tree-node_text\"\n                    x={cx}\n                    y={cy}\n                    textAnchor=\"middle\"\n                    alignmentBaseline=\"central\"\n                    data-node-id={label}\n                >\n                    {label}\n                </text>\n            </g>\n        </>\n    );\n};\n","import { useCallback } from \"react\";\nimport { Line } from \"./Line\";\nimport { Node } from \"./Node\";\n\nconst PADDING = 2;\n\nexport const Tree = ({ nodes, width, height, selectedId, onNodeSelected }) => {\n    const onClick = useCallback(\n        (e) => {\n            if (e.target.dataset.nodeId) {\n                onNodeSelected(e.target.dataset.nodeId);\n            } else {\n                onNodeSelected(null);\n            }\n        },\n        [onNodeSelected]\n    );\n\n    const edges = nodes\n        .filter((node) => !!node.parent)\n        .map((node) => <Line key={node.label} begin={node.parent} end={node} />);\n\n    const leafs = nodes.map((node) => {\n        return <Node key={node.label} node={node} selected={node.label === selectedId} />;\n    });\n\n    return (\n        <svg\n            onClick={onClick}\n            className=\"tree\"\n            width={width + PADDING}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            viewBox={`0 0 ${width + PADDING} ${height + PADDING}`}\n        >\n            {edges}\n            {leafs}\n        </svg>\n    );\n};\n","import { useCallback } from \"react\";\n\nexport const DEFAULT_COLOR = \"#1E90FF\";\nconst COLORS = [\"#9370D8\", DEFAULT_COLOR, \"#DAA520\", \"#FFC0CB\", \"#90EE90\"];\n\nexport const Toolkit = ({ depth, color, onDepthChanged, onColorChanged }) => {\n    const increment = useCallback(() => {\n        onDepthChanged(depth + 1);\n    }, [onDepthChanged, depth]);\n\n    const decrement = useCallback(() => {\n        onDepthChanged(depth - 1);\n    }, [onDepthChanged, depth]);\n\n    return (\n        <div className=\"toolkit\">\n            <label htmlFor=\"depth\">Глубина</label>\n            <div>\n                <button disabled={depth === 1} onClick={decrement}>\n                    -\n                </button>\n                <input name=\"depth\" type=\"number\" min={1} max={20} value={depth} readOnly />\n                <button disabled={depth === 20} onClick={increment}>\n                    +\n                </button>\n            </div>\n\n            <label htmlFor=\"color\">Цвет</label>\n            <div name=\"color\">\n                {COLORS.map((c) => (\n                    <div\n                        key={c}\n                        style={{ backgroundColor: c }}\n                        className={`toolkit_color ${color === c ? \"toolkit_color-selected\" : \"\"}`}\n                        onClick={() => onColorChanged(c)}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { makeTree } from \"./model/node\";\nimport { Tree } from \"./components/Tree\";\nimport { DEFAULT_COLOR, Toolkit } from \"./components/Toolkit\";\n\nconst NODE_SIZE = 25;\n\nclass App extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        const initialDepth = 2;\n        const initialColor = DEFAULT_COLOR;\n\n        this.state = {\n            selected: null,\n            color: initialColor,\n            depth: initialDepth,\n            ...makeTree(initialDepth, NODE_SIZE, initialColor),\n        };\n    }\n\n    render() {\n        const { color, depth, selected, ...tree } = this.state;\n\n        return (\n            <div className=\"app\">\n                <Toolkit color={color} depth={depth} onColorChanged={this.setColor} onDepthChanged={this.setDepth} />\n\n                <div className=\"tree-wrapper\">\n                    <Tree {...tree} selectedId={selected} onNodeSelected={this.selectNode} />\n                </div>\n            </div>\n        );\n    }\n\n    selectNode = (id) => this.setState({ selected: id });\n\n    setDepth = (depth) => {\n        const { color } = this.state;\n        const tree = makeTree(depth, NODE_SIZE, color);\n\n        const restoredSelection =\n            this.state.selected !== null ? tree.nodes.find((n) => n.label === this.state.selected) : null;\n\n        this.setState({ selected: restoredSelection ? restoredSelection.label : null, depth, ...tree });\n    };\n\n    setColor = (color) => {\n        const { selected, nodes } = this.state;\n        if (selected !== null) {\n            const node = nodes.find((n) => n.label === selected);\n\n            if (node) {\n                this.setState({ color });\n                this.animate(color, node.label);\n            }\n        }\n    };\n\n    animate = (color, id) => {\n        let node = null;\n        const newNodes = this.state.nodes.map((n) => {\n            return n.label !== id ? n : (node = { ...n, color });\n        });\n\n        if (node) {\n            this.setState({ nodes: newNodes }, () => {\n                const parent = node.parent ? this.state.nodes.find((n) => n.label === node.parent.label) : null;\n                const left = node.left ? this.state.nodes.find((n) => n.label === node.left.label) : null;\n                const right = node.right ? this.state.nodes.find((n) => n.label === node.right.label) : null;\n\n                if (parent && parent.color !== color) {\n                    setTimeout(() => this.animate(color, parent.label), animationInterval());\n                }\n\n                if (left && left.color !== color) {\n                    setTimeout(() => this.animate(color, left.label), animationInterval());\n                }\n\n                if (right && right.color !== color) {\n                    setTimeout(() => this.animate(color, right.label), animationInterval());\n                }\n            });\n        }\n    };\n}\n\nconst animationInterval = () => {\n    const min = 800;\n    const max = 1200;\n\n    const result = min + Math.random() * (max + 1 - min);\n    return Math.floor(result);\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}